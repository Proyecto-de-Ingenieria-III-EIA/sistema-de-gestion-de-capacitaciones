datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  emailVerified DateTime?
  image         String?
  phone         String?
  area          String?
  roleId        Int       @unique @default(1)
  role          Role      @relation(fields: [roleId], references: [id], onDelete: Cascade)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  trainings         Training[]
  accounts          Account[]
  sessions          Session[]
  enrollments       Enrollment[]
  assessmentResults AssessmentResult[]
  forumPosts        ForumPost[]
  comments          Comment[]
}

model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  @@id([provider, providerAccountId])
}

model Training {
  id           String             @id @unique @default(cuid())
  title        String
  description  String
  isHidden     Boolean            @default(false)
  materials    TrainingMaterial[]
  assessments  Assessment[]
  enrollments  Enrollment[]
  forumPosts   ForumPost[]
  instructorId String

  instructor User     @relation(fields: [instructorId], references: [id], onUpdate: Cascade)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
}

model TrainingMaterial {
  id         String   @id @unique @default(cuid())
  trainingId String
  fileType   String
  fileUrl    String
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  training Training @relation(fields: [trainingId], references: [id], onUpdate: Cascade)
}

model Enrollment {
  id         String           @id @unique @default(cuid())
  trainingId String
  userId     String
  status     EnrollmentStatus @default(PENDING)

  training Training @relation(fields: [trainingId], references: [id], onUpdate: Cascade)
  user     User     @relation(fields: [userId], references: [id], onUpdate: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum EnrollmentStatus {
  PENDING
  APPROVED
  REJECTED
}

model Assessment {
  id         String     @id @unique @default(cuid())
  trainingId String
  title      String
  questions  Question[]
  createdAt  DateTime   @default(now())
  updatedAt  DateTime   @updatedAt

  training Training @relation(fields: [trainingId], references: [id], onUpdate: Cascade)

  assessmentResults AssessmentResult[]
}

model Question {
  id           String   @id @unique @default(cuid())
  assessmentId String
  question     String
  options      String[]
  answer       String
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  assessment Assessment @relation(fields: [assessmentId], references: [id], onUpdate: Cascade)
}

model AssessmentResult {
  id           String   @id @unique @default(cuid())
  assessmentId String
  userId       String
  score        Int
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  user       User       @relation(fields: [userId], references: [id], onUpdate: Cascade)
  assessment Assessment @relation(fields: [assessmentId], references: [id], onUpdate: Cascade)
}

model ForumPost {
  id         String    @id @unique @default(cuid())
  trainingId String
  userId     String
  title      String
  content    String
  isActive   Boolean   @default(true)
  comments   Comment[]
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt

  training Training @relation(fields: [trainingId], references: [id], onUpdate: Cascade)
  user     User     @relation(fields: [userId], references: [id], onUpdate: Cascade)
}

model Comment {
  id          String   @id @unique @default(cuid())
  forumPostId String
  userId      String
  content     String
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  forumPost ForumPost @relation(fields: [forumPostId], references: [id], onUpdate: Cascade)
  user      User      @relation(fields: [userId], references: [id], onUpdate: Cascade)
}

model Session {
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum Enum_RoleName {
  ADMIN
  INSTRUCTOR
  USER
}

model Role {
  id    Int           @id @default(autoincrement())
  name  Enum_RoleName
  users User?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
